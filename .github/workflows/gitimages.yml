# Docker 镜像构建和推送工作流
name: ghcr image build

# 触发条件
on:
  workflow_dispatch:  # 允许手动触发工作流

# 定义工作任务
jobs:
  docker:
    # 指定运行环境为最新的 Ubuntu
    runs-on: ubuntu-latest

    steps:
      # 第一步：检出代码
      # 从 GitHub 仓库拉取源代码到 runner 环境
      - name: Checkout code
        uses: actions/checkout@v4

      # 第二步：登录到 Docker Hub
      # 使用仓库变量和密钥进行身份验证
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}    # 仓库所有者（自动获取）
          password: ${{ secrets.TOKEN }}    # Docker Hub 访问令牌（密钥）

      # 第三步：设置 QEMU
      # 启用多架构模拟，支持构建 ARM64 等非本机架构的镜像
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 第四步：设置 Docker Buildx
      # 启用 Docker 的高级构建功能，支持多平台构建和缓存
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第五步：构建并推送 Docker 镜像到 GitHub Container Registry
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .                                  # 构建上下文：当前目录
          file: ./Dockerfile                         # Dockerfile 路径
          platforms: linux/amd64,linux/arm64        # 目标平台：支持 x86_64 和 ARM64
          push: true                                 # 构建完成后推送到仓库
          # 镜像标签（推送到 ghcr.io）
          tags: |
            ghcr.io/${{ github.repository_owner }}/testexpress:latest
            ghcr.io/${{ github.repository_owner }}/testexpress:${{ github.sha }}
          cache-from: type=gha                       # 从 GitHub Actions 缓存读取
          cache-to: type=gha,mode=max               # 写入 GitHub Actions 缓存（最大模式）